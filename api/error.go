package api

import "fmt"

var (
	MessageErr map[int]string = map[int]string{
		0: "Успешно выполнено",

		10: "Код отправлена на email",
		11: "Не верный код авторизации",
		12: "Не корректный email",
		13: "Ошибка получения access-token",
		14: "Access-token не действителен",
		15: "Access-token истек",
		16: "Пользователь не найден",
		17: "Ошибка авторизации по коду",
		18: "Ошибка получения данных из access-token",

		20: "Ошибка получения refresh-token",
		21: "Сессия не найдена ",

		// session
		100: "Ошибка сессии",

		401: "Пользователь не авторизован",
		404: "Страница не найдена",

		500: "Ошибка на сервер попробуйте позже",

		// tournament
		700: "Ошибка в теле запроса",
		701: "Ошибка получения данных, попробуйте позже",
		702: "Нет доступа на изменение",
		703: "Не удалось создать турнир",
		704: "Не корректная дата",
		705: "Не корректная дата",
		706: "Не корректная дата",
		707: "Не корректная дата",

		// organization
		1000: "",
		1001: "Ошибка в теле запроса",
		1002: "Не удалось создать организацию",
		1003: "Не удалось обновить организацию",
		1004: "Ошибка поиска организации",
		1005: "Ошибка поиска команды",
		1006: "Нельзя создать организацию, вы уже являетесь претставителем команды",
		1007: "Нельзя создать организация, организация уже создана",
		1008: "Нельзя изменить чужую организацию",

		// team
		1200: "Ошибка создания команды",
		1201: "Команда уже создана",
		1203: "Ошибка в теле запроса",
		1204: "Не удалось создать команду",
		1205: "Ошибка поиска команды",
		1206: "Ошибка обновления команды",
		1207: "Нельзя изменить чужую команду",

		// invite to team
		1300: "У вас ещё не создано ни одной команды ",
		1301: "Ошибка в теле запроса",
		1302: "Не передан id приглашения",
		1303: "Приглашение не найдено",
		1304: "Приглашение отменено",
		1305: "Статус приглашения изменить нельзя",
		1306: "Приглашение не найдено",
		1307: "Не допустимый статус",
	}
)

func GetMessageErr(idError int) string {

	if _, ok := MessageErr[idError]; !ok {
		return fmt.Sprintf("Error: num %i is not found in dict", idError)
	}

	return MessageErr[idError]
}
